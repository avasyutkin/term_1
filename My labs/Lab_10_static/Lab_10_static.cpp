//Lab_10 - привязка бибилиотеки
#include "static.h"
#include <iostream>

int main()
{
	setlocale(0, "");

	matrixdyn A, B;
	A.create();
	A.input();
	std::cout << "Матрица A \n";
	A.print();

	B.create();
	B.input();
	std::cout << "Матрица B \n";
	B.print();

	A.transp();

	std::cout << "A + B \n" << A + B << std::endl;
	std::cout << "A - B \n" << A - B << std::endl;
	std::cout << "A * B \n" << A * B << std::endl;

	A.del();
	B.del();

	getchar();
	return 0;
}










/*
1.ХЭДРОН БИБЛИОТЕКИ
2.СТАТИЧЕСКИЕ БИБЛИОТЕКИ
3.ДИНАМИЧЕСКИЕ БИБЛИОТЕКИ

ДИНАМИЧЕСКИЕ БИБЛИОТЕКИ В WIN - .DLL
1. код из динамических библиотке не включается в приложение.exe, а распространяется в виде отдельного файла, которым могут пользоваться несколько приложений одновременно
основным лотличием от статических является то, что они тащатся в виде отдельных файлов.


2. преимущества:
досмтаточно развернуть на магшине один компект нужных длл, и все прилоги, которые в них нуждаются, будут ими пользоваться
достаточно всего лишь дной копии длл на машине
при определенном типе свыязывания длл возможна змена отдельных длл файлов на машине пользователя без реинсталляции всего проекта

недостки :
подключение в проект несколько сложнее, чем для статических, и значительно сложнеее, чем для хэдэрон библиотек
очень легко потерять, так как он хранится в виде отдельнго файла
необходимость сложной процедуры развертывани приложенй и комплектов длл на машине пользователя(работа инсталлятора)


3. типы привязывания динамических диблиотек(бывает статическои динимическое привяывание динамичесих библиотек)
при статическом привязыании требуются три файла : сама длл(длл(код программы) рядом с екзе, .h, либ статически подключить, чтоб учтавововала в сборке(хранится таблица ссылок на функции, хранящиеся в длл),
	для динамического связывания не нужна либ, нужно только.h и.dll
	для саттического связывания нужно три группы файлов : длл(код функции)б либ(с табьлицей адресов) и.h(заголовки)
	для нимаческог связывания требуюьтся длл и.h
	в случае статического всязывания зависимость приложения от бибилотек более жесткая : зависсимость прописывается при сборке придложения и длл загружаются в память ОС при старте приложения если длл не обнаружены, то ОС аварийно завершает работу приложения
	также в данном случае прявляется жесткая привязка к версии бибилиотек, при замене длл на более старую или новую версию должно быть пересобрано само приложение с новой версией либ

	при динамическом связывания зависимость приложений менее жесткая, программист сам прописывает в ходе приложения момент загрузки динамичкеских библиотек и может их загружать
	приложение может выполнять свою работу даже при утере длл, если они еимеюьт вспомогательно назначение, по данному принципу работает один из механизмов встроцки плагинов в прилогу, недостаток в том, что динамеческо связываеие наиболее трудоемко для программиста
	и в первом и во втором случае длл одна и та же
	в члучае динамического связывания приложение менее чувствительно к версии длл, может само проверять версию длл и подставивать свою работу под различные версии длл

	***современный процесс преобразования исходных кодо к машинному включает этап компиляции и этап сборки
	при компиляции каждый фвайл исходного кода анализируется и преоббразуется в отдельный файл машинного кода с раширением.obj(каждый фал отдельно компилируется в файл.obj(.сpp + .h->.obj))
	в процесае линкинга(сборки) obj(к котору подключаются либ файлы) преобразуются exe

	мы пользуемся стандартными библиотеками std and stl
	поток - обстракция, позволяющая помещать или извлекать инфу из задананного источника последовательно, по порциям.
	контейнер - класс, инкапсулирующий множество элементов и методы рабогты с ними

	*/

